#
# HyperSPIN code - hspn_surrogate_models
#
# Copyright 2025 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Licensed under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software each subject to its own license.
#
# DM25-0396
#
# Building:
#   Load apptainer (or singularity) module as needed.
#   Note that singularity/apptainer are interchangeable in the below commands
#   Navigate to project root
#
# Option 1: Standard build
#   singularity build --fakeroot --bind $(shell pwd):/workspace hspn.sif cluster/hspn.def
#
# Option 2: In case of memory issues use two-step sandbox build process
#   singularity build --sandbox --fakeroot --bind $(shell pwd):/workspace hspn.sif cluster/hspn.def
#   singularity build --fakeroot hspn.sif hspn.sif/


# apptainer build --sandbox --fakeroot hspn.sandbox/ --bind $(shell pwd):/workspace hspn.sif cluster/hspn.def
# apptainer build --fakeroot hspn.sif hspn.sandbox/

# module load singularity && singularity build --fakeroot --bind $(pwd):/workspace hspn.sif cluster/hspn.def

# Stage 1: System deps
# Bootstrap: docker
# From: debian:bullseye
# Stage: builder
#
# %post
#     set -eux
#     apt-get update
#     apt-get install -y --no-install-recommends iproute2
#     # strip /sbin/ip
#     mkdir -p /out
#     cp /sbin/ip /out/ip
#
# # Stage 2: Final image
# Bootstrap: docker
# From: nvcr.io/nvidia/pytorch:24.03-py3
#
# %files from builder
#     /out/ip /usr/local/bin/ip
#
# %post
#     chmod +x /usr/local/bin/ip
#     echo "Installed ip:"
#     /usr/local/bin/ip --version

Bootstrap: docker
From: nvcr.io/nvidia/pytorch:24.03-py3

%post
    apt-get update && \
      DEBIAN_FRONTEND=noninteractive \
      apt-get install -y --no-install-recommends \
          iproute2 redis-server && \
      apt-get clean && \
      rm -rf /var/lib/apt/lists/
    cd /workspace && \
      # Install deps manually so we can exclude torch
      pip install --no-cache-dir --no-deps -e . && \
      pip install --no-cache-dir \
        hydra-core==1.3.2 \
        hydra-optuna-sweeper==1.2.0 \
        hydra-rq-launcher==1.2.0 \
        hydra-ray-launcher \
        aim==3.28.0 \
        cloudpickle==3.0.0 \
        h5py==3.13.0 \
        netcdf4==1.7.2
    # NOTE: This is a specific install sequence that is necessary due to conflicts in upstream dependencies
    pip install --no-cache-dir ray==2.4.0 && \
      pip install --no-cache-dir hydra-ray-launcher==1.2.0 --no-deps && \
      pip install --no-cache-dir "pydantic<2.0"

%environment
    export PYTHONUNBUFFERED=1
    export REDIS_PORT=6379
